read -s -dĦ scan_strings
##-### remember all \ must be converted to '\\' ###--###
eval($___($__));
eval(stripslashes(@$_POST[
eval(stripslashes(array_pop(
eval(base64_decode(
eval(gzinflate(str_rot13(base64_decode(
Array(base64_decode(
sha1(base64_decode(
print(base64_decode(
wsoScandir($dir)
substr(current(array_keys(
cwd = @getcwd();
$OOO000000=urldecode(
wsoScandir($dir
$l___l_='base'.(32*2)
substr(md5(strrev(
cwd[strlen($cwd)
="x62
+ r + "&r=" + document.referrer;
if(strtoupper(substr(PHP_OS, 0, 3) ) == "WIN")
){if(@copy(
copy("endless.html
system("wget
symlink("/","sym/root");
@copy($_FILES['file']['tmp_name']
error_reporting(0);if(
x6C\\x28\\x67\\x7A\\x69
"/.*/e","\\x28\\x65\\x76\\x61
preg_replace("/.*/e",
preg_replace(\\"\\x
Windows-1251";preg_replace(
); exit(); } if(isset(
system("$cmd"); die;}
rtrim($security_code, "/");
window.top.location.href="http://
@ini_get("disable_functions")
die(PHP_OS.chr(49).chr(48).chr(43).md5(0987654321)
die(PHP_OS.chr(49).chr(49).chr(43).md5(0987654321)
eval($s21(${$s20}
strtolower($sF[4].$sF[5].$sF[9].$sF[10]
${eval(base64_decode('DQokYXV0aF9wYXNzID0gIiI7DQokY29sb3IgP
fwrite($fp,"\\xEF\\xBB\\xBF"
if(strtolower(substr(PHP_OS,0,3))=='win') $s="\\
${"_PO"."ST"}
${'_PO'.'ST'}
\\x47LOB\\x41\\x4c\\x53
\\x76\\x72vw\\x65y\\x70\\x7an\\x69\\x70\\x75
\\x61\\x63\\x74\\x69\\x6f\\x6e
$_passssword =
$passsword
$passssword
$passsssword
$passssssword
$_passsword
$_passssword
$_passsssword
$_passssssword
@array((string)$_REQUEST['password']
stripslashes($_REQUEST['re_password'])
eval(base64_decode(file_get_contents('php://input')))
mt_rand(0,count($not_android_urls)-1)
mt_rand(0,count($android_urls)-1);
\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61
x78\\x6b\\x72\\x74\\x79z\\x6e
x65\\x74\\x75\\x72\\x6e
$default_action = 'FilesMan';
[php][RES]" . base64_encode($respond) . "[/RES]
base64_decode($_GET['u'])
eval(gzuncompress(base64_decode('eNqs/QV3Y1e2Lgz/FSXjvCPdKce1W
$au=$jq(@$_COOKIE['ContentJQ1']);
eval(base64_decode($_REQUEST["sam"]));
$slash.implode($slash,$t_p)
eval(gzinflate(str_rot13(base64_decode('FZrHroTMkmFfpXTdVAzwQX
eval(gzinflate(base64_decode("NZjHDoRIEkTv+xlzmhEr4Z1We8
eval(gzinflate(base64_decode($r57
strtolower($sF[4].$sF[5].$sF[9].$sF[10].$sF[6]
eval($OOO0000O0(
%66%67%36%73%62%65%68%70
$www= $_POST['ice']) && @preg_replace(
#p@$c@#
x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74
is_uploaded_file/*;*/($_FILES
= mail(stripslashes($
x70i\\x6c\\x69\\x72\\x77\\x71\\x67
'wz8' . 'osA' . '/Jp' . '1Zy'
@preg_replace('/(.*)/e'
strtoupper($qV[4].$qV[3].$qV[2].$qV[0]
$GLOBALS[$GLOBALS['
"ba".""."s"."e"."".""."6"."4"."_"."de"."c"."o". ""."de".""
ZXZhbCgiXHg2NVx4NzZceDYxXHg2Q1x4MjhceDY3XHg3QVx4NjlceDZFXHg2Nl
md5($_REQUEST["pwd"])==="92eef09d8ed4eae0ce299c8c6f5f2a9b"
x6c\\x69\\x63e\\x6es\\x65\\x5f\\x69np\\x75t_f\\x61\\x6c\\x6cb\\x61\\x63\\x6b
implode("\\r\\n",array("%1html%3","%1head%3",head(
$__FILE__=__FILE__;$__X__
x47\\x4c\\x4f\\x42A\\x4c\\x53
escape(document[
escape(navigator[
base64'.'_decode
gzun'.'compress
gz'.'inflate
preg_replace("/.*/e","\\x
if(!isset($GLOBALS['."\\'\\a\\e\\0
\\x61\\156\\x75\\156\\x61
strtolower($_SERVER["\\x48\\124\\x54\\120\\x5f\\125\\x53
x47\\x4c\\x4f\\x42\\x41\\x4c\\x53
base64_decode('PD9waHAKLyoqCiAqIEZyb250IHRvIHRoZSBXb3JkUH
base64_decode('IyBCRUdJTiBXb3JkUHJlc3MKPElmTW9
\\x65\\x76\\x61\\x6C\\x28\\x24\\x4A\\x46\\x61\\x63\\x74\\x6F\\x72\\x79\\x28
\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28
document.write(unescape("%3C%68%74%6D%6C%3E%3C%68%65%61%64%3E%3C%74%69%74%6C%65%3E%48
$time = str_replace("@"," ",$_GET["localtime"])
substr(md5($_GET["localdate"]),
@system("killall -9 ".basename("/usr/bin/host"));
\\x7f\\x45\\x4c\\x46\\x01\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00
\\x7f\\x45\\x4c\\x46\\x02\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00
crontab -l|grep -v crontab;echo;echo
@system("killall -9 ".basename(
array(/*'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'
${"\\x47\\x4c\\x4f\\x42\\x41L\\x53"}["\\x77m\\x68\\x72\\x76\\x6c\\x6c"]="\\x6b";
${"GL\\x4fB\\x41\\x4c\\x53"}["\\x6bg\\x6e\\x72\\x77i\\x6e\\x64\\x62n"]
base64_decode("LyhwcmludHxzcHJpbnR8ZWNobykv")
eval(base64_decode("93X2NvbnRlbnQoJGNvbnRlbnQpIHsKCQlpZiAob3VyVXJsQW5kUmVmZXJlcigpICAmJiA
base64_decode("aWYgKGlzc2V0KCRfUE9TVFsnY2hlY2snXSkpIH
$x = 'xP19k6tXtt6L/n0d4e8wve6O6N5eaS9eUc2St7fDhVGC
$_F=__FILE__;$_X=
$OOO0O0O00=__FILE__;$O00O00O00=__LINE__;
base64_decode('JE8wMDBPME8wMD1mb3BlbigkT09PME8wTzA
base64_decode(gzuncompress(base64_decode(
$QF97D38852B3B5E33DB41B9A75A7EB807="eNptl8uSozwShR
eval(base64_decode("Bi+3+P6z0h+5
eval(base64_decode('JF9YPWJhc2
$_X=base64_decode($_X)
000000000eval(gzinflate(base64_decode(
eval(gzinflate(base64_decode(
$_X=base64_decode($_X)
if(isset($_POST["rew"]) && !empty($_POST["rew"]))
$re=@unserialize($_POST["rew"]
preg_replace("/.*/".chr(101)."","\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66
echo(gzinflate(base64_decode("Bi+3+P6z0h
eval(gzuncompress(base64_decode
die(PHP_OS.chr(49).chr(48).chr(43).md5(098765432
$cfg='eHnk/byvIZ80Xz6tz/kWupsIypy4egX0GqeWwZyQKF45zAyD59qYN
unserialize(string_cpt(base64_decode(
if(!isset($GLOBALS["\\x61\\156\\x75\\156\\x61"])) { $ua=strtolower($_SERVER["\\x48\\124\\x54\\120\\x5f\\125\\x53\\105
eval(base64_decode("JGF1dGhfcGFzcyA9ICJjNWVkMTkyNDViNmRhMjB
$default_action = 'FilesMan';
base64_decode('7f15VyM5sjAO/119Tn+HbA8zhguFNwy4qqDbOza28b519+HkZjtxbuVMr
$_REQUEST[chr(115).chr(97).chr(109)])
eval(chr(47).chr(42).chr(116).chr(116)
chr(47).chr(42).chr(116).chr(116)
$GLOBALS["\\x61\\156\\x75\\156\\x61"])) { $ua=strtolower($_SERVER["\\x48\\124\\x54\\120\\x5f\\125
function_exists("TC9A16C47DA8EEE87")){function TC9A16C47DA8EEE87($T059EC46CFE335260){$T059EC46CFE335260=base64_decode($T059EC46CFE335260)
$au=$jq(@$_COOKIE['
$option("/438/e",$au,438); die();
$e29[19].$e29[94].$e29[94].$e29[33].$e29[94]
$e29[81].$e29[77].$e29[58].$e29[44].$e29[62]
Array('1'=>'i', '0'=>'K', '3'=>'u', '2'=>'M', '5'=>'v', '4'=>'1'
md5($_SERVER['PHP_AUTH_USER'])
array('base64','user_pass','substring','or id=','eval(','nutch');
array("w"=>"o","t"=>"g","l"=>"i","r"=>"a","q"=>"c"
strtoupper(md5(uniqid(time(
$s['o'].$s['w'].$s['v'].$s['q'].$s['w'].$s['t'].$s['c']
"\\163\\164\\162"
subprocess.Popen('del C:\\data.txt'
array_unshift($data,119,105,110,100,111,119,46,116
if ( $password == "123456" )
\\x47L\\x4f\\x42\\x41\\x4c\\x53
mysql_connect($_POST["v1"], $_POST["v2"], $_POST["v3"]
select concat(option_value,'|%5%5%5')
GL\\x4fB\\x41\\x4c\\x53
\\x6bg\\x6e\\x72\\x77i\\x6e\\x64\\x62n
\\x47\\x4c\\x4f\\x42\\x41L\\x53
\\x77m\\x68\\x72\\x76\\x6c\\x6c
$k17[90].$k17[60].$k17[60].$k17[48].$k17[60]
$k17[89].$k17[28].$k17[39].$k17[36]
$i96[94].$i96[51].$i96[51].$i96[39].$i96[51]
\\x65\\x76\\x61\\x6C
\\142\\141\\x73\\145\\x36\\x34\\x5f\\x64\\145\\x63\\157
file(__FILE__);eval(base64_decode
="base64_decode"
= "base64_decode"
='base64_decode'
'1'=>'j', '0'=>'t', '3'=>'G', '2'=>'d', '5'=>'k'
$fz|'eazzjwfpnpfamfxjctlg'
eval("return eval(
base64_decode("XCRfNjU0NjFiZWQwMjUzZGEyZjY1ZDNkMWYyNjE3MWYyZDggPSBceDczXHg3NFx4NzJceDY5
mail($_POST['ypuckmy']
$YLbgPfj524[42].$YLbgPfj524[19].$YLbgPfj524[13].$YLbgPfj524[42]
chr(101)."\\x76".chr(97)."".chr(108)."".chr(40)."g\\x7Ai\\x6E".chr(102)
'1'=>'t', '0'=>'p', '3'=>'v', '2'=>'n', '5'=>'k',
'1'=>'l', '0'=>'f', '3'=>'M', '2'=>'X', '5'=>'Z', '4'=>'s'
'1'=>'Z', '0'=>'q', '3'=>'6', '2'=>'H', '5'=>'V', '4'=>'M'
'1'=>'d', '0'=>'e', '3'=>'C', '2'=>'U', '5'=>'6', '4'=>'V'
'1'=>'z', '0'=>'G', '3'=>'5', '2'=>'X', '5'=>'N', '4'=>'V'
"b" . "a" . "s" . "e" . "6" . "4" . "_" . "d" . "e" . "c" . "o" . "d" . "e"
eval/**test*/(/**test*/$config/**test*/(/**test*/
$wordpress('eNqN/U+r9Eq75gd+lWo48J4DNVBIqVVP1uEYHmUqpFSmQkuh+CNF0
$s='str'.'_rot'.'1'.'3';         $c0=__FILE__
$www= $_POST['yt']
preg_replace('/ad/e','@'.str_rot13(
$aa = explode('}">', $a);
array (q,w,e,r,t,y,u,i,o,p,a,s,d,f,g,h,j,k,l,z,x
str_replace("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
if(isset($_GET["ickey"])){echo"<font color=#FFFFFF>[uname]".php_uname()
eval(base64_decode("ICAgIGVycm9yX3JlcG9ydGluZygwKTsgICRscnUgPSAiZ2cvNDcwNTYxN
return $str ? '=?utf-8?B?'.base64_encode($str).'?=' : null
Ħnone 2>/dev/null

read -s -dĦ INPUT

Ħnone 2>/dev/null
. <(echo $INPUT | base64 -d) >/dev/null

read -s -dĦ INPUT
CmNsZWFyCmlmIFsgIiQodHlwZSAtdCB3cHVybCkiICE9ICJmdW5jdGlvbiIgXSA7IHRoZW4gCiAgZWNobyAiRmFpbGVkIHRvIGxvYWQgdG9vbCIKZWxzZQogIGlmIFsgLWQgIi4vcHVibGljX2h0bWwiIF0gOyB0aGVuCiAgICBjZCAuL3B1YmxpY19odG1sCiAgZmkKICBpZiBbIC1mICIuL3dwLWNvbmZpZy5waHAiIF0gOyB0aGVuCiAgICB3cGRiCiAgICB3cHNjYW4gcnF1aWNrIHNjcmlwdAogICAgd3B1cmwKICBmaQogIGVjaG8gIkFsbCBsb2FkZWQgYW5kIHJlYWR5IgpmaQoK
Ħnone 2>/dev/null
. <(echo $INPUT | base64 -di)

