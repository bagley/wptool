function now() {
  date -u +"%Y%m%d-%H%M%S"
}

function wpcore() {
  #Also need to add option to download the version that matches the db
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "\nThis tool downloads the latest core, a new core of the current version, or a\nspecified version.\n"
    echo -e "Usage:\n"
    echo -e "\twpcore [VERSION]\n"
    echo -e "\tVERSION\n\t\tdownload version VERSION of the Wordpress core, in the form of\n\t\t#.#.# or 'cur' for current version\n"
    return
  fi
  temp=$(now)
  tempdir="download_$temp"
  mkdir $tempdir && echo "Created $tempdir..."
  file="latest"
  [[ -n $1 ]] && file="wordpress-$1"
  [[ $1 == "cur" ]] && file=wordpress-$(wpver -q|sed "s/\t.*\t\(.*\)/\1/")
  ! wget -qP $tempdir http://wordpress.org/$file.zip && echo Unable to download $file.zip! && rm -rf $tempdir && echo "Removed download_$temp..." && return 9 || echo "Downloaded $file.zip..."
  ! unzip $tempdir/$file.zip -d $tempdir >/dev/null && echo "Failed to extract new core files" && return 1 || echo "Extracted new core files..."
  
  oldcore="core_$temp"
  mkdir $oldcore && echo "Created $oldcore..."
  mv wp-includes* $oldcore || echo "No wp-includes folder"!
  mv wp-admin* $oldcore || echo "No wp-admin folder"!
  mv wp-content* $oldcore || echo "No wp-content folder"!
  find . -maxdepth 1 -type f -exec mv -t $oldcore {} + && echo "Moved old core to $oldcore..."
  
  mv $tempdir/wordpress/* . && echo "Moved new core to its new home..."
  mv wp-content wp-content_stock && echo "Moved default wp-content to wp-content_stock..."
  mv $oldcore/wp-content . && echo "Moved old wp-content back into place..."
  cp $oldcore/wp-config.php . && echo "Moved old wp-config.php back into place..."
  rm -rf $tempdir && echo "Removed temporary download folder..."
  wpht
}

function wpfix() {
  echo
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "This tool runs various built-in Wordpress functions and fixes.\n\nUsage:\n\n\twpfix\n"
    return
  elif [[ ! -f wp-config.php || ! -f wp-admin/upgrade-functions.php ]]; then
    echo -e "Could not find one or more of the necessary files (wp-config.php or wp-admin/upgrade-functions.php)!\n"
    return 9
  fi
  temp=$(now)
  cat >fix_$temp.php <<EOF
<?php
  require('wp-config.php');
  echo "WordPress loaded...\n";
  require('wp-admin/upgrade-functions.php');
  echo "Upgrade functions loaded...\n";
  wp_cache_flush();
  echo "Object cache flushed...\n";
  make_db_current();
  echo "Database made current...\n";
  upgrade_160();
  echo "Data upgraded...\n";
  \$wp_rewrite->flush_rules();
  echo "Rewrite rules flushed...\n";
  wp_cache_flush();
  echo "Object cache flushed...\n";
?>
EOF
  echo "Created fix_$temp.php..."
  php -q fix_$temp.php && echo "Ran fix_$temp.php..." || echo Error running fix_$temp!
  rm -f fix_$temp.php && echo "Removed fix_$temp.php..."
  echo
}

function wpht() {
  echo
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "This tool generates a new .htaccess file.\n\nUsage:\n\n\twpht\n"
    return
  elif [[ ! -f wp-config.php ]]; then
    echo -e "Could not find one or more of the necessary files:\n"
    echo -e "\twp-config.php\n\twp-admin/includes/misc.php\n\twp-admin/includes/file.php\n"
    return 9
  fi
  temp=$(now)
  [[ -f .htaccess ]] && mv .htaccess .htaccess_$temp
  cat >ht_$temp.php <<EOF && echo "Created ht_$temp.php..." && echo "Generated rewrite rules..."
<?php
  require('wp-config.php');
  require('wp-admin/includes/misc.php');
  require('wp-admin/includes/file.php');
  \$home_path = get_home_path();
  \$htaccess_file = \$home_path.'.htaccess';
  if ((!file_exists(\$htaccess_file) && is_writable(\$home_path) && \$wp_rewrite->using_mod_rewrite_permalinks()) || is_writable(\$htaccess_file)) {
    \$rules = explode( "\n", \$wp_rewrite->mod_rewrite_rules() );
    insert_with_markers( \$htaccess_file, 'WordPress', \$rules );
  }
?>
EOF
  php -q ht_$temp.php 1>/dev/null && echo "Wrote to .htaccess..." || echo Error running fix_$temp or writing to .htaccess!
  rm -f ht_$temp.php && echo "Removed ht_$temp.php..."
  echo
}

function wpconn() {
  [[ -z $1 || $1 != wp* ]] && return
  if [[ ! -f wp-config.php ]]; then
    echo -e "\nCould not find wp-config.php!\n"
    return 9
  fi
  myconn=""
  read dbname dbuser dbpass dbhost junk dbprefix <<< $(cat wp-config.php | egrep "'DB_|table_prefix" | sed "s/.*[\"']\(.*\)[\"'].*;.*/\1/" )
  [[ -z $dbprefix ]] && dbprefix=$junk #sometimes there isn't a junk entry
  q="USE $dbname; "
  if [[ $1 == "wpdbimport" ]]; then
    mysql -h "$dbhost" -u "$dbuser" -p"$dbpass" "$dbname" < "$2" && echo -e "Imported file '$2' to database '$dbname'.\n" || echo -e "Failed to import file '$2' to database '$dbname'!\n"
    return
  elif [[ $1 == "wpdbexport" ]]; then
    file="$2"
    [[ -z "$file" ]] && file="$dbname"_$(now).sql
    mysqldump -h "$dbhost" -u "$dbuser" -p"$dbpass" "$dbname" > "$file" && echo -e "Exported database '$dbname' to file '$file'.\n" || echo -e "Failed to export database '$dbname' to file '$file'!\n"
    return
  elif [[ $1 == "wpdb" ]]; then q=$q'SHOW tables like "'$dbprefix'%";';
  elif [[ $1 == "wpdbver" ]]; then q=$q'SELECT option_value FROM '$dbprefix'options WHERE option_name = "db_version";'
  elif [[ $1 == "wpurl" ]]; then q=$q'SELECT option_id, option_name, option_value FROM '$dbprefix'options WHERE option_name = "siteurl" OR option_name = "home";'
  elif [[ $1 == "wpurlmod" ]]; then
    [[ -z $2 ]] && echo No URL specified! && return 9
    q=$q'UPDATE '$dbprefix'options SET option_value="'$2'" WHERE option_name="siteurl" OR option_name="home";'
  elif [[ $1 == "wpplug" ]]; then q=$q'SELECT option_value FROM '$dbprefix'options WHERE option_name = "active_plugins";'
  elif [[ $1 == "wptheme" ]]; then q=$q'SELECT option_id, option_name, option_value FROM '$dbprefix'options WHERE option_name = "stylesheet" OR option_name = "template";'
  elif [[ $1 == "wpthememod"* ]]; then
    [[ -z $2 ]] && echo No theme specified! && return 9
    if [[ $1 == "wpthememod" ]]; then q=$q'UPDATE '$dbprefix'options SET option_value="'$2'" WHERE option_name="stylesheet" OR option_name="template" OR option_name="current_theme";'
    elif [[ $1 == "wpthememods" ]]; then q=$q'UPDATE '$dbprefix'options SET option_value="'$2'" WHERE option_name="stylesheet";'
    elif [[ $1 == "wpthememodt" ]]; then q=$q'UPDATE '$dbprefix'options SET option_value="'$2'" WHERE option_name="template" OR option_name="current_theme";'
    else echo -e "\tInvalid query"! && return 1
    fi
  elif [[ $1 == "wpuser" ]]; then q=$q'SELECT * FROM '$dbprefix'users LIMIT 23;'
  elif [[ $1 == "wpuser1" ]]; then q=$q'SELECT user_login FROM '$dbprefix'users WHERE ID=1;'
  elif [[ $1 == "wpuserinfo" ]]; then q=$q'SELECT ID, user_login, user_email, user_status, umeta_id, meta_key, meta_value FROM '$dbprefix'users JOIN '$dbprefix'usermeta ON ('$dbprefix'users.ID = '$dbprefix'usermeta.user_id) WHERE ID='$2';'
  elif [[ $1 == "wpusera" ]]; then q=$q'DELETE FROM '$dbprefix'usermeta WHERE user_id='$2' AND (meta_key="'$dbprefix'capabilities" OR meta_key="'$dbprefix'user_level"); INSERT INTO '$dbprefix'usermeta (user_id,meta_key,meta_value) VALUES ('$2', "'$dbprefix'capabilities", '"'a:1:{s:13:\"administrator\";b:1;}'"'); INSERT INTO '$dbprefix'usermeta (user_id,meta_key,meta_value) VALUES ('$2', "'$dbprefix'user_level", 10); SELECT user_login FROM '$dbprefix'users WHERE ID='$2';'
  elif [[ $1 == "wpuserp" ]]; then q=$q'UPDATE '$dbprefix'users SET user_pass=MD5("'$3'") WHERE ID='$2'; SELECT user_login FROM '$dbprefix'users WHERE ID='$2';'
  elif [[ $1 == "wpuseru" ]]; then q=$q'SELECT user_login FROM '$dbprefix'users WHERE ID='$2'; UPDATE '$dbprefix'users SET user_login="'$3'" WHERE ID='$2';'
  elif [[ $1 == "wpuserd" ]]; then q=$q'SELECT user_login FROM '$dbprefix'users WHERE ID='$2'; DELETE FROM '$dbprefix'users WHERE ID='$2'; DELETE FROM '$dbprefix'usermeta WHERE user_id='$2';'
  elif [[ $1 == "wpusernew" ]]; then q=$q'INSERT INTO '$dbprefix'users (user_login, user_pass) VALUES ("deleteme", MD5("deleteme")); SET @new_id=LAST_INSERT_ID(); INSERT INTO '$dbprefix'usermeta (user_id,meta_key,meta_value) VALUES (@new_id, "'$dbprefix'capabilities", '"'a:1:{s:13:\"administrator\";b:1;}'"'); INSERT INTO '$dbprefix'usermeta (user_id,meta_key,meta_value) VALUES (@new_id, "'$dbprefix'user_level", 10); SELECT @new_id;'
  else echo -e "\tInvalid query"! && return 1
  fi
  myconn=$(mysql -u "$dbuser" -p"$dbpass" -h "$dbhost" -e "$q" 2>&1)
  if [[ 1 -eq 0 ]]; then #Debug
    echo -e "\nConnected to the database..."
    echo -e "Query:\n\n\t$q"
    echo -e "$myconn".
  elif [[ $myconn == "ERROR"* ]]; then return 9
  fi
}

function wpdb() {
  #Need to include a optimize/fix option
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "\nThis tool tests the database connectivity based on settings in the wp-config.php file, and can import/export a database based on its settings.\n"
    echo -e "Usage:\n"
    echo -e "\twpdb [option [param]]\n"
    echo -e "\t-i FILE\n\t\texport current database to file FILE. The specified FILE must end in .sql"
    echo -e "\t-e [FILE]\n\t\texport current database to optional file FILE. If a FILE is specified, it must end in .sql\n"
    return
  elif [[ ! -f wp-config.php ]]; then echo Could not find wp-config.php! && return 9
  fi
  wpconn "wpdb"
  [[ $1 != "-q" ]] && echo -e "\n\tDB user:\t$dbuser\n\tDB pass:\t$dbpass\n\tDB host:\t$dbhost\n\tDB name:\t$dbname\n\tDB prefix:\t$dbprefix\n"
  if [[ -z $myconn ]]; then
    [[ $1 == "-q" ]] && echo -e "\tDatabase:\tPrefix?" || echo -e "Connected with no errors, but no tables that match specified prefix"!"\n"
  elif [[ $myconn == "ERROR"* ]]; then
    [[ $1 == "-q" ]] && echo -e "\tDatabase:\tError"! || echo -e "$myconn\n"
    return 9
  else
    [[ $1 == "-q" ]] && echo -e "\tDatabase:\tOK" || echo -e "Database connection settings appear to be fine.\n"
  fi
  if [[ $1 == "-i" ]]; then
    if [[ -z "$2" ]]; then echo -e "No import file specified!\n" && return
    elif [[ "$2" != *.sql ]]; then echo -e "'$2' is not a valid file!\n" && return
    elif [[ ! -f "$2" ]]; then echo -e "File '$2' does not exist!\n" && return
    else
      echo "Starting import..."
      wpconn "wpdbimport" "$2"
    fi
  elif [[ $1 == "-e" ]]; then
    if [[ -n "$2" ]]; then
      if [[ "$2" != *.sql ]]; then echo -e "'$2' is not a valid filename!\n" && return
      elif [[ -f "$2" ]]; then echo -e "File '$2' already exists!\n" && return
      fi
    else
      echo "Starting export..."
      wpconn "wpdbexport" "$2"
    fi
  fi
}

function wpurl() {
  [[ $1 == "-q" ]] && wpconn "wpurl" && echo "$myconn" | tail -n +2 && return
  echo
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "This tool returns the current URL settings in the database, or updates them to a specified URL.\n"
    echo -e "Usage:\n"
    echo -e "\twpurl [URL]\n"
    echo -e "\tURL\n\t\tspecify a URL to change the site to. If the URL does not start with 'http://' or 'https://' it will automatically append 'http://'.\n"
    return
  elif [[ ! -f wp-config.php ]]; then echo Could not find wp-config.php! && return 9
  fi
  if [[ -n $1 ]]; then
    newurl=$1
    [[ ! $newurl =~ https?://* ]] && newurl="http://"$newurl && echo "No 'http://' or 'https://' in provided URL"! && echo "Using '$newurl' instead..."
    wpconn "wpurlmod" $newurl && echo "Updated URLs to $newurl..."
  else
    wpconn "wpurl"
    [[ -z $myconn ]] && echo -e "\thome:\tnot found\n\tsiteurl:\tnot found\n" && return
    echo -e "$myconn" | tail -n +2 | awk '{print "\t"$2"("$1"):\t"$3}'
  fi
  echo
}

function wptheme() {
  [[ $1 != "-q" ]] && echo
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "This tool returns the current theme, as well as listing any available ones found in the wp-content/themes folder. It also can change to a specified stylesheet, template, both, or to a new copy of twentytwelve.\n"
    echo -e "Usage:\n"
    echo -e "\twptheme [THEME [option]]\n"
    echo -e "\tTHEME\n\t\tspecify a THEME for both the stylesheet and template. If 'fresh' is specified as the theme, it will download and install the 'twentytwelve' theme."
    echo -e "\tTHEME -s\n\t\tchange only the WP stylesheet"
    echo -e "\tTHEME -t\n\t\tchange only the WP template\n"
    return
  elif [[ ! -f wp-config.php ]]; then echo Could not find wp-config.php! && return 9
  fi
  folder=wp-content/themes
  if [[ $1 == "-q" || -z $1 ]]; then
    wpconn "wptheme"
    if [[ $myconn == "" ]]; then echo -e "\tstylesheet:\tnot found\n\ttemplate:\tnot found"
    elif [[ $myconn != "ERROR"* ]]; then
      echo -e "$myconn" | tail -2 | awk '{print "\t"$2"("$1"):\t"$3}'
    fi
  fi
  [[ ! -d $folder && $1 != "-q" ]] && mkdir -p $folder && echo -e "\nCreated $folder..."
  if [[ $1 == "-q" ]]; then return
  elif [[ -z $1 ]]; then
    echo -e "\nAvailable themes:\n"
    ls -F $folder |grep "/"|grep -v "^\."|sed "s|^\(.*\)/|\t\1|" #ls -A is overwritten by default $LS_OPTIONS in alias
  elif [[ $1 == "fresh" ]]; then
    wget -qP $folder http://wordpress.org/extend/themes/download/twentytwelve.1.1.zip && echo "Downloaded twentytwelve.1.1.zip..." || {
      echo Unable to download twentytwelve.1.1.zip!
      return 9
    }
    temp=$(now)
    [[ -d $folder/twentytwelve ]] && mv $folder/twentytwelve $folder/twentytwelve_$temp && echo "Moved old twentytwelve files to twentytwelve_$temp..."
    unzip $folder/twentytwelve.1.1.zip -d $folder >/dev/null && echo "Extracted new twentytwelve files..." || {
      echo "Failed to extract twentytwelve files"!
      return 1
    }
    wpconn "wpthememod" "twentytwelve" && echo "Changed to theme 'twentytwelve'..."
    rm -f $folder/twentytwelve.1.1.zip && echo "Deleted twentytwelve.1.1.zip..."
  else
    [[ ! -d wp-content/themes/$1 ]] && echo -e "No such theme"!"\n" && return 1
    if [[ $2 == "-s" ]]; then wpconn "wpthememods" $1 && echo "Changed to stylesheet '$1'..."
    elif [[ $2 == "-t" ]]; then wpconn "wpthememodt" $1 && echo "Changed to template '$1'..."
    elif [[ -n $2 ]]; then echo "Invalid option"!
    else wpconn "wpthememod" $1 && echo "Changed to theme '$1'..."; fi
  fi
  echo
}

function wpver() {
  [[ $1 != "-q" ]] && echo
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "This tool returns the current install's file and database versions.\n"
    echo -e "Usage:\n"
    echo -e "\twpver\n"
    return
  elif [[ ! -f wp-includes/version.php ]]; then
    [[ $1 == "-q" ]] && echo "Unknown" || echo -e "\tCould not find wp-includes/version.php!\n"
    return 9
  fi
  ver=$(cat wp-includes/version.php | grep "wp_version " | sed "s/.*'\(.*\)'.*/\1/")
  if [[ $1 == "-q" ]]; then
    [[ -z $2 ]] && echo "$ver" || echo "$dbver"
    return
  fi
  echo -e "\tWP version:\t$ver"
  [[ ! -f wp-config.php ]] && echo -e "\tCould not find wp-config.php!\n" && return 9
  wpconn "wpdbver"
  if [[ $myconn == "ERROR"* ]]; then echo -e "\tDB version:\tnot found"!
  else
    dbver=$(echo -e "$myconn" | tail -1)
    echo -e "\tDB version:\t$dbver (up to "$(curl -Ss http://codex.wordpress.org/FAQ_Installation | grep "= $dbver" | head -1 | awk '{print $1}')")"
  fi
  echo
}

function wpuser() {
  [[ $1 != "-q" ]] && echo
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "This tool performs various user functions, including returning info for a specified user, changing usernames, passwords, changing a user to an admin, creating new admin users, and deleting users.\n"
    echo -e "Usage:\n"
    echo -e "\twpuser [param [option [param]]]\n"
    echo -e "\tUSERID\n\t\tReturns details about specified user USERID"
    echo -e "\tUSERID -u NAME\n\t\tchange username of user USERID to NAME"
    echo -e "\tUSERID -p PASS\n\t\tchange password of user USERID to PASS"
    echo -e "\tUSERID -a\n\t\tpromote user USERID to admin"
    echo -e "\tUSERID -d\n\t\tdelete user USERID"
    echo -e "\t-n, new\n\t\tcreate new admin user\n"
    return
  elif [[ ! -f wp-config.php ]]; then echo Could not find wp-config.php! && return 9
  fi
  if [[ -z $1 ]]; then wpconn "wpuser"				#list users
  elif [[ $1 == "-q" ]]; then wpconn "wpuser1"			#list first user
  elif [[ $1 =~ ^[0-9]+$ ]]; then				#if a number...
    if [[ $2 == "-p" ]]; then					  #change password...
      if [[ -n $3 ]]; then wpconn "wpuserp" $1 "$3"		    #...if one is specified...
      else echo -e "\tNo password specified"!"\n" && return 1; fi   #...otherwise, end.
    elif [[ $2 == "-u" ]]; then					  #change username...
      if [[ -n $3 ]]; then wpconn "wpuseru" $1 "$3"		    #...if one is specified...
      else echo -e "\tNo username specified"!"\n" && return 1; fi   #...otherwise, end.
    elif [[ $2 == "-a" ]]; then wpconn "wpusera" $1	 	  #change to admin
    elif [[ $2 == "-d" ]]; then read -p "$(echo $'\t')Delete user '$1'? " -n 1 -r && echo && [[ ! $REPLY =~ ^[Yy]$ ]] && echo -e "\tDeletion of user '$1' cancelled"!"\n" && return 1 || wpconn "wpuserd" $1	 	  #delete user
    elif [[ -z $2 ]]; then wpconn "wpuserinfo" $1		  #show user info
    else echo -e "\tInvalid option"!"\n" && return 1; fi		  #Otherwise, end.
  elif [[ $1 == "new" || $1 == "-n" ]]; then wpconn "wpusernew"		#create new admin...
  else echo -e "\tInvalid option"!"\n" && return 1; fi		#Otherwise, end.
  if [[ $myconn == "" ]]; then echo -e "\tUser not found"!
  elif [[ $myconn != "ERROR"* ]]; then
    if [[ -z $1 ]]; then echo -e "$myconn" | tail -n +2 | awk '{print "\t"$1":\t"$2}'
    elif [[ $1 == "-q" ]]; then echo $(echo -e "$myconn" | tail -1)
    elif [[ $2 == "-p" ]]; then echo -e "Updated password for user $1 ('$(echo -e "$myconn" | tail -1)') to '$3'..."
    elif [[ $2 == "-u" ]]; then echo -e "Updated username for user $1 from '$(echo -e "$myconn" | tail -1)' to '$3'..."
    elif [[ $2 == "-a" ]]; then echo -e "Promoted user $1 to admin..."
    elif [[ $2 == "-d" ]]; then echo -e "\nDeleted user $1 ('$(echo -e "$myconn" | tail -1)')..."
    elif [[ $1 == "new" || $1 == "-n" ]]; then echo -e "Created new admin (user '$(echo -e "$myconn" | tail -1)') with username 'deleteme' and password 'deleteme'..."
    elif [[ -z $2 ]]; then echo -e "$myconn" | tail -n +2
    fi
  else echo "$myconn"
  fi
  [[ $1 != "-q" ]] && echo
}

function wpplug() {
  echo
  folder=wp-content/plugins
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "This tool does basic plugin functions, such as displaying active and available plugins, or disabling them all.\n"
    echo -e "Usage:\n"
    echo -e "\twpplug [option]\n"
    echo -e "\t-d\n\t\tdisable all plugins by renaming the plugins folder\n"
    return
  elif [[ ! -d $folder ]]; then echo "The $folder folder was not found"! && return 9
  elif [[ ! -f wp-config.php ]]; then echo Could not find wp-config.php! && return 9
  fi
  if [[ $1 == "-d" ]]; then
    temp=$(now)
    mv $folder "$folder"_$temp && echo "Moved plugins to $folder"_$temp...
  elif [[ -z $1 ]]; then
    echo -e "Active plugins:\n"
    wpconn "wpplug"
    active=$(echo "$myconn" | tail -n +2)
    php-cli -r "print_r(unserialize('$active'));" | grep "=>" | sed "s|.*=> \(.*\)|\t\1|"
    echo
    echo -e "Available plugins:\n"
    ls -F $folder |grep "/"|grep -v "^\."|sed "s|^\(.*\)/|\t\1|" #ls -A is overwritten by default $LS_OPTIONS in alias
  fi
  echo
}

function wptests() {
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "This tool does basic tests on the install.\n"
    echo -e "Usage:\n"
    echo -e "\twptests [param [option param]]\n"
    echo -e "\tall\n\t\ttests each item in wp-content/plugins on the server\n"
    echo -e "\tall --url URL\n\t\ttests HTTP status code for each item in wp-content/plugins at specified url URL\n"
    return
  elif [[ ! -f wp-config.php ]]; then echo Could not find wp-config.php! && return 9
  fi
  if [[ $2 == "--url" && -n $3 ]]; then status=$(curl -sIL -o /dev/null -w "%{http_code}\n" $3)
  else status=$(php index.php >/dev/null && php wp-admin/index.php >/dev/null; echo $?); fi
  [[ $1 == "-q" ]] && echo $status && return
  echo
  [[ $status != "255" && $status != "500" ]] && echo -e "No errors detected..." || echo -e "500 error on page"!
  echo
  [[ -z $1 ]] && return
  [[ $1 == "all" ]] && folders="wp-content/plugins" || folders=$(echo $1|sed "s|/$||g")
  temp=$(now)
  if [[ $2 == "--url" && -n $3 ]]; then echo -e "*** NOTE: This test doesn't confirm items are fully functional; it simply checks the status code on '$3'. DO NOT INTERRUPT! ***\n"
  else echo -e "*** NOTE: This test doesn't confirm items are fully functional; it simply tries to run index.php and wp-admin/index.php in the local shell. DO NOT INTERRUPT! ***\n"; fi
  temp=$(now)
  for f in $folders; do
    [[ ! -d $f ]] && echo "The folder '$f' was not found"! && continue
    echo "Testing $f..."
    mv $f "$f"_$temp && echo "Moved $f to $f"_$temp...
    mkdir $f && echo "Created new $f folder..."
    status=$(wptests -q --url $3); [[ $status == "255" || $status == "500" ]] && echo "Renaming the $f folder results in a 500 error...errors below MAY be safe to ignore"! || echo "Renaming the $f folder appears to result in no error..."
    for i in "$f"_$temp/*; do
      [[ -f $i ]] && continue
      plugin=${i##*/}
      mv "$f"_$temp/$plugin $f && echo -e "\tTesting ${f%?} '$plugin'..." $(
        status=$(wptests -q --url $3)
        if [[ $status == "200" || $status == "0" ]]; then echo "OK"
        elif [[ $status == 255 ]]; then echo "500"
        else echo $status; fi
      ) && mv $f/$plugin "$f"_$temp
    done
    mv "$f"_$temp/* $f && echo "Moved $f back to original folder..." && rm -rf "$f"_$temp && echo "Removed $f"_$temp...
  done
  echo
}

function wpstats() {
  if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "\nThis tool returns a basic overview of the Wordpress install.\n\nUsage:\n\n\twpstats\n" && return
  elif [[ -n $1 ]]; then return
  fi
  echo
  echo -e "\tWP version:\t"$(wpver -q)
  echo -e "\tStatus code:\t"$( temp=$(wptests -q); [[ $temp != "255" ]] && echo "OK" || echo "Error"!)
  if wpdb -q; then
    echo -e "\tUserID 1:\t"$(wpuser -q)
    wpurl -q | awk '{print "\t"$2"("$1"):\t"$3}'
    wptheme -q
  fi
  echo
}

function wptool() {
  echo -e "
 _       ______  __              __
| |     / / __ \/ /_____  ____  / /
| | /| / / /_/ / __/ __ \/ __ \/ / 
| |/ |/ / ____/ /_/ /_/ / /_/ / /  
|__/|__/_/    \__/\____/\____/_/  
                   a toolkit production

"
  echo "WPtool is suite of bash functions to administer Wordpress installs. It assumes you are running said functions in the site's root folder. The available functions, listed below, each have a -h option for more information:"
  echo
  echo -e "\twpstats: basic overview"
  echo -e "\twpurl:   URL tools"
  echo -e "\twptheme: theme tools"
  echo -e "\twpdb:    db tools"
  echo -e "\twpuser:  user tools"
  echo -e "\twpplug:  plugin tools"
  echo -e "\twpht:    .htaccess generator"
  echo -e "\twpcore:  core replacement tools"
  echo -e "\twpfix:   built-in WP fixes"
  echo -e "\twpver:   returns the current version"
  echo
  echo -e "Version: 1.5 (8 June 2013)"
  echo -e "Site:    https://code.google.com/p/wptool/"
  echo
}

#search, multisite
echo -e "\n\tInjected WPtool into current bash session. For details, type 'wptool'.\n"
unset HISTFILE